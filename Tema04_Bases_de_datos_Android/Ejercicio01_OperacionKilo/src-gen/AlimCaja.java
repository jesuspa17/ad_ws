package ;

import .DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "ALIM_CAJA".
 */
public class AlimCaja {

    private int cantidad;
    private long alimento_id;
    private long caja_id;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient AlimCajaDao myDao;

    private Alimento alimento;
    private Long alimento__resolvedKey;

    private Caja caja;
    private Long caja__resolvedKey;


    public AlimCaja() {
    }

    public AlimCaja(int cantidad, long alimento_id, long caja_id) {
        this.cantidad = cantidad;
        this.alimento_id = alimento_id;
        this.caja_id = caja_id;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getAlimCajaDao() : null;
    }

    public int getCantidad() {
        return cantidad;
    }

    public void setCantidad(int cantidad) {
        this.cantidad = cantidad;
    }

    public long getAlimento_id() {
        return alimento_id;
    }

    public void setAlimento_id(long alimento_id) {
        this.alimento_id = alimento_id;
    }

    public long getCaja_id() {
        return caja_id;
    }

    public void setCaja_id(long caja_id) {
        this.caja_id = caja_id;
    }

    /** To-one relationship, resolved on first access. */
    public Alimento getAlimento() {
        long __key = this.alimento_id;
        if (alimento__resolvedKey == null || !alimento__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            AlimentoDao targetDao = daoSession.getAlimentoDao();
            Alimento alimentoNew = targetDao.load(__key);
            synchronized (this) {
                alimento = alimentoNew;
            	alimento__resolvedKey = __key;
            }
        }
        return alimento;
    }

    public void setAlimento(Alimento alimento) {
        if (alimento == null) {
            throw new DaoException("To-one property 'alimento_id' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.alimento = alimento;
            alimento_id = alimento.getId();
            alimento__resolvedKey = alimento_id;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Caja getCaja() {
        long __key = this.caja_id;
        if (caja__resolvedKey == null || !caja__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CajaDao targetDao = daoSession.getCajaDao();
            Caja cajaNew = targetDao.load(__key);
            synchronized (this) {
                caja = cajaNew;
            	caja__resolvedKey = __key;
            }
        }
        return caja;
    }

    public void setCaja(Caja caja) {
        if (caja == null) {
            throw new DaoException("To-one property 'caja_id' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.caja = caja;
            caja_id = caja.getId();
            caja__resolvedKey = caja_id;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
